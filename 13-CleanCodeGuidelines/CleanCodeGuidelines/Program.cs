/*

클린 코드를 위한 핵심 원칙 요약

1. 자기만의 코드 스타일을 만들어라
- 강의자는 자신의 코드 스타일을 따르지만, 시청자는 자신에게 맞는 스타일을 정하고 따라야 함.
- 개발하면서 코드 리팩터링과 네이밍 변경은 자연스러운 과정임. 두려워하지 말고 계속 개선하자.

2. 클린 코드란 무엇인가?
- 읽기 쉽고, 이해하기 쉬우며, 수정이 쉬운 코드.
- 나쁜 코드는 의도가 잘 보이지 않지만, 좋은 코드는 코드를 읽는 즉시 의도가 명확해야 한다.

3. 좋은 변수/함수 이름 짓기
- 이름만 잘 지어도 코드의 품질이 비약적으로 좋아진다.
- 클래스, 변수, 함수 이름 모두 의미를 명확히 표현해야 함.

4. 매직 넘버(Magic Numbers) 피하기
- 의미 없는 숫자를 직접 코드에 쓰지 말고, 의미 있는 이름을 가진 변수에 저장해서 사용하자.

5. 문자열(String)로 식별자 사용 금지
- "Sprite" 같은 문자열로 오브젝트를 찾으면 오타나 공백으로 인해 디버깅이 매우 어려움.
- 직접 참조(reference), enum, 태그, ScriptableObject 등을 활용하자.
- 문자열이 꼭 필요하면 const string으로 상수화해서 사용.

6. 공개 범위 최소화 (정보 은닉)
- public 필드를 남발하지 말 것.
- 기본은 private, 필요할 때만 public 사용.
- 외부 접근이 필요한 경우, getter/setter 또는 프로퍼티(property)를 이용.

7. 단일 책임 원칙 (Single Responsibility Principle)
- 클래스나 함수는 한 가지 역할만 하도록 설계.
- 함수명이 "and"를 포함한다면 두 가지 일을 하고 있을 가능성이 높음, 나눠야 함.

8. 짧은 함수 유지
- 함수는 가능한 짧게 유지.
- 너무 길면 기능을 분리해서 작은 함수들로 나누는 리팩터링을 고려.

9. 관련 데이터는 구조화해서 함께 묶기
- 관련된 여러 변수를 하나의 구조체(class, struct)로 묶으면 더 명확함.
class PlayerStats
{
    int health;
    int mana;
    int stamina;
}

10.주석은 마지막 수단
- 변수나 함수 이름만 잘 지으면 대부분의 경우 주석 없이도 충분히 이해 가능.
- 왜 그런 코드가 필요한지 설명할 때만 주석 사용.

11. DRY 원칙 (Don't Repeat Yourself)
- 반복되는 코드는 함수로 분리하자.
- 똑같은 코드가 3번 이상 반복된다면 리팩터링 타이밍임.

12. 리팩터링은 언제나 중요하다
- 코드를 완벽하게 처음부터 짤 수는 없다.
- 리팩터링은 개발의 일부이며, 자연스럽게 반복해야 할 작업이다.

13. 복잡성 관리 (Managing Complexity)
- 코드가 커질수록 관리가 어려워진다.
- 코드 간의 결합도를 낮추고, 필요한 것만 외부에 노출하자.

*/

namespace CleanCodeGuidelines
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello, World!");
        }
    }
}
